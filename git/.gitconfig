# gitconfig for git >=2.11

[core]
    excludesfile = ~/.gitignore_global
[filter "lfs"]
    smudge = git-lfs smudge %f
    required = true
    clean = git-lfs clean %f
[init]
    templatedir = ~/.git_template
    defaultBranch = main
[alias]
    # ---- git-submodule-update-checker
    submodule-updates = "!f(){ git submodule foreach 'git fetch origin master &> /dev/null; git --no-pager log --oneline HEAD...origin/master'; }; f"
    # ---- initialize and configure user profile
    # (do not use global setting to prevent from accidentally commiting with wrong accounts)
    configure = "!f(){ git config --local user.name "zk-phi"; git config --local user.email "zk-phi@users.noreply.github.com"; }; f"
    initialize = "!f(){ git init; git configure; git commit --allow-empty -m 'Initial commit'; }; f"
    # ---- mark new files as tracked
    touch = add -N
    # ---- patch/unpatch a commit
    # -> 'git show $1 -p' doesn't work with stashes so we use diff here
    patch = "!f(){ git diff $1^ $1 | git apply; }; f"
    unpatch = "!f(){ git diff $1^ $1 | git apply --reverse; }; f"
    stack = "!f(){ git diff HEAD...$1 | git apply; }; f"
    imitate = "!f(){ local ref=$(git symbolic-ref HEAD); git checkout $1; git symbolic-ref HEAD $ref; }; f"
    # ---- compare two branches excluding commits from other branches
    compare = "!f() { git diff ${1:-master}...${2:-HEAD}; }; f"
    history = "!f() { git log ${1:-master}..${2:-HEAD}; }; f"
    # ---- push and pull in one shot
    sync = "!f(){ local target=${1-$(git symbolic-ref --short HEAD)}; git pull origin $target --ff-only && git push origin HEAD:$target; }; f"
    publish = "!f(){ git push origin HEAD:${1-$(git symbolic-ref --short HEAD)}; }; f"
    # ---- delete old local branches
    clean-branch = "!f() { git branch -d $(git branch --merged ${1:-master} | grep -v \"*\\|${1:-master}\"); }; f"
    # ---- show dangling objects
    dangling-commits  = "!f() { git show --format='%ad %h : %s' --no-patch --date=short $(git fsck | grep 'commit' | cut -d ' ' -f 3) | sort -r | less; }; f"
    # ---- locally ignore some files
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = "!f() { git ls-files -v | grep '^[[:lower:]]'; }; f"
    # ---- DWIM abort rebase, merge or cherry-pick
    abort = "!f() { local command=$(git status | grep -o \"git \\w* --abort\"); echo $command; $($command); }; f"
    # ---- update timestamp of recent commits
    redate = "!f(){ export FILTER_BRANCH_SQUELCH_WARNING=1; local date=$(date); git filter-branch -f --env-filter 'export GIT_AUTHOR_DATE=\"$date\"; export GIT_COMMITTER_DATE=\"$date\"' $1..HEAD; }; f"
[merge]
    conflictStyle = diff3
[fetch]
    prune = true
[diff]
    algorithm = histogram
    indentHeuristic = true
[color]
    ui = auto
[pager]
    log = diff-highlight | less
    show = diff-highlight | less
    diff = diff-highlight | less
